const express = require('express');const router = express.Router();const queries = require('../db/queries');function calcLastPage(limit, total) {    const rawResult = total / limit;    const mod = total % limit;    return Math.floor(mod === 0 ? rawResult : rawResult + 1);}function isValidId(req, res, next) {    const id = req.params.id;    if (!isNaN(id)) {        return next();    }    next(new Error(`Invalid ID '${id}'`));}function isValidType(req, res, next) {    const type = req.params.type;    const types = ['house', 'apartment', 'farm'];    if (types.includes(type)) {        return next();    }    next(new Error(`Invalid Type '${type}'`));}router.get('/', (req, res) => {    const limit = parseInt(req.query.limit) || 10;    const page = parseInt(req.query.page) || 1;    const offset = (page - 1) * limit;    queries.getAll(limit, offset).then(({data, total}) => {        res.json({data, total, page, limit, last_page: calcLastPage(limit, total)});    });});router.get('/search', (req, res) => {    const limit = parseInt(req.query.limit) || 10;    const page = parseInt(req.query.page) || 1;    const offset = (page - 1) * limit;    if (req.query.q) {        queries.getAllByQuery(req.query.q, limit, offset).then(({data, total}) => {            res.json({data, total, page, limit, last_page: calcLastPage(limit, total)});        });    } else {        queries.getAll(limit, offset).then(({data, total}) => {            res.json({data, total, page, limit, last_page: calcLastPage(limit, total)});        });    }});router.get('/popular', (req, res) => {    queries.getAll(8, 50).then(({data, total}) => {        res.json({data});    });});router.get('/types/:type', isValidType, (req, res) => {    const limit = parseInt(req.query.limit) || 10;    const page = parseInt(req.query.page) || 1;    const offset = (page - 1) * limit;    queries.getAllByQuery(req.params.type, limit, offset).then(({data, total}) => {        res.json({data, total, page, limit, last_page: calcLastPage(limit, total)});    });});router.get('/:id', isValidId, (req, res, next) => {    queries.getOne(req.params.id).then(realEstate => {        if (realEstate) {            res.json(realEstate);        } else {            next();        }    });});module.exports = router;